from faker import Faker
from faker.providers import address, company, currency, date_time, file, job, lorem
from sql_metadata import Parser
import sys

# Example query
# INSERT INTO technology (name, description)
# VALUES (
#         'Python',
#         'Python is a programming language that lets you work quickly and integrate systems more effectively.'
#     );

# So the names are more like programming languages
language_names = [
    "A.NET",
    "A-0 System",
    "A+",
    "ABAP",
    "ABC",
    "ABC ALGOL",
    "ACC",
    "Accent",
    "Ace Distributed Application Specification Language",
    "Action!",
    "ActionScript",
    "Actor",
    "Ada",
    "Adenine",
    "AdvPL",
    "Agda",
    "Agilent VEE",
    "Agora",
    "AIMMS",
    "Aldor",
    "Alef",
    "ALF",
    "ALGOL 58",
    "ALGOL 60",
    "ALGOL 68",
    "ALGOL W",
    "Alice ML",
    "Alma-0",
    "AmbientTalk",
    "Amiga E",
    "AMPL",
    "Analitik",
    "AngelScript",
    "Apache Pig latin",
    "Apex",
    "APL",
    "AppleScript",
    "APT",
    "Arc",
    "ARexx",
    "Argus",
    "Assembly language",
    "AutoHotkey",
    "AutoIt",
    "AutoLISP",
    "Averest",
    "AWK",
    "Axum",
    "B",
    "Babbage",
    "Ballerina",
    "Bash",
    "BASIC",
    "Batch file",
    "bc",
    "BCPL",
    "BeanShell",
    "BETA",
    "BLISS",
    "Blockly",
    "BlooP",
    "Boo",
    "Boomerang",
    "Bosque",
    "C",
    "C--",
    "C++",
    "C*",
    "C#",
    "C/AL",
    "Caché ObjectScript",
    "C Shell",
    "Caml",
    "Carbon",
    "Catrobat",
    "Cayenne",
    "CDuce",
    "Cecil",
    "CESIL",
    "Céu",
    "Ceylon",
    "CFEngine",
    "Cg",
    "Ch",
    "Chapel",
    "Charm",
    "CHILL",
    "CHIP-8",
    "ChucK",
    "Cilk",
    "Claire",
    "Clarion",
    "Clean",
    "Clipper",
    "CLIPS",
    "CLIST",
    "Clojure",
    "CLU",
    "CMS-2",
    "COBOL",
    "CobolScript",
    "Cobra",
    "CoffeeScript",
    "ColdFusion",
    "COMAL",
    "COMIT",
    "Common Intermediate Language",
    "Common Lisp",
    "COMPASS",
    "Component Pascal",
    "COMTRAN",
    "Concurrent Pascal",
    "Constraint Handling Rules",
    "Control Language",
    "Coq",
    "CORAL",
    "CorVision",
    "COWSEL",
    "CPL",
    "Cryptol",
    "Crystal",
    "Csound",
    "Cuneiform",
    "Curl",
    "Curry",
    "Cybil",
    "Cyclone",
    "Cypher Query Language",
    "Cython",
    "CEEMAC",
    "D",
    "Dart",
    "Darwin",
    "DataFlex",
    "Datalog",
    "DATATRIEVE",
    "dBase",
    "dc",
    "DCL",
    "Delphi",
    "DIBOL",
    "DinkC",
    "Dog",
    "Draco",
    "DRAKON",
    "Dylan",
    "DYNAMO",
    "DAX",
    "E",
    "Ease",
    "Easy PL/I",
    "EASYTRIEVE PLUS",
    "eC",
    "ECMAScript",
    "Edinburgh IMP",
    "EGL",
    "Eiffel",
    "ELAN",
    "Elixir",
    "Elm",
    "Emacs Lisp",
    "Emerald",
    "Epigram",
    "EPL",
    "Erlang",
    "es",
    "Escher",
    "ESPOL",
    "Esterel",
    "Etoys",
    "Euclid",
    "Euler",
    "Euphoria",
    "EusLisp Robot Programming Language",
    "CMS EXEC",
    "EXEC 2",
    "Executable UML",
    "Ezhil",
    "F",
    "F#",
    "F*",
    "Factor",
    "Fantom",
    "FAUST",
    "FFP",
    "fish",
    "Fjolnir",
    "FL",
    "Flavors",
    "Flex",
    "Flix",
    "FlooP",
    "FLOW-MATIC",
    "FOCAL",
    "FOCUS",
    "FOIL",
    "FORMAC",
    "@Formula",
    "Forth",
    "Fortran",
    "Fortress",
    "FP",
    "FoxBase/FoxPro",
    "Franz Lisp",
    "Futhark",
    "F-Script",
    "G",
    "Game Maker Language",
    "GameMonkey Script",
    "General Algebraic Modeling System",
    "GAP",
    "G-code",
    "GDScript",
    "Genie",
    "Geometric Description Language",
    "GEORGE",
    "OpenGL Shading Language",
    "GNU E",
    "GNU Ubiquitous Intelligent Language for Extensions",
    "Go",
    "Go!",
    "Game Oriented Assembly Lisp",
    "Gödel",
    "Golo",
    "Good Old Mad",
    "Google Apps Script",
    "Gosu",
    "GOTRAN",
    "General Purpose Simulation System",
    "GraphTalk",
    "GRASS",
    "Grasshopper",
    "Groovy",
    "H",
    "Hack",
    "HAGGIS",
    "HAL/S",
    "Halide",
    "Hamilton C shell",
    "Harbour",
    "Hartmann pipelines",
    "Haskell",
    "Haxe",
    "Hermes",
    "High Level Assembly",
    "High Level Shader Language",
    "Hollywood",
    "HolyC",
    "Hop",
    "Hopscotch",
    "Hope",
    "Hume",
    "HyperTalk",
    "Hy",
    "I",
    "Io",
    "Icon",
    "IBM Basic assembly language",
    "IBM HAScript",
    "IBM Informix-4GL",
    "IBM RPG",
    "IDL",
    "Idris",
    "Inform",
    "ISLISP",
    "J",
    "J#",
    "J++",
    "JADE",
    "Jai",
    "JAL",
    "Janus",
    "Janus",
    "JASS",
    "Java",
    "JavaFX Script",
    "JavaScript",
    "Jess",
    "JCL",
    "JEAN",
    "Join Java",
    "JOSS",
    "Joule",
    "JOVIAL",
    "Joy",
    "jq",
    "JScript",
    "JScript .NET",
    "Julia",
    "Jython",
    "K",
    "K",
    "Kaleidoscope",
    "Karel",
    "KEE",
    "Kixtart",
    "Klerer-May System",
    "KIF",
    "Kojo",
    "Kotlin",
    "KRC",
    "KRL",
    "KRL",
    "KRYPTON",
    "KornShell",
    "Kodu",
    "Kv",
    "L",
    "LabVIEW",
    "Ladder",
    "LANSA",
    "Lasso",
    "Lava",
    "LC-3",
    "Lean",
    "Legoscript",
    "LIL",
    "LilyPond",
    "Limbo",
    "LINC",
    "Lingo",
    "LINQ",
    "LIS",
    "LISA",
    "Language H",
    "Lisp",
    "Lite-C",
    "Lithe",
    "Little b",
    "LLL",
    "Logo",
    "Logtalk",
    "LotusScript",
    "LPC",
    "LSE",
    "LSL",
    "LiveCode",
    "LiveScript",
    "Lua",
    "Lucid",
    "Lustre",
    "LYaPAS",
    "Lynx",
    "M",
    "M Formula language",
    "M2001",
    "M4",
    "M#",
    "Machine code",
    "MAD",
    "MAD/I",
    "Magik",
    "Magma",
    "Maple",
    "MAPPER",
    "MARK-IV",
    "Mary",
    "MATLAB",
    "MASM Microsoft Assembly x86",
    "MATH-MATIC",
    "Maude system",
    "Maxima",
    "Max",
    "MaxScript internal language 3D Studio Max",
    "Maya",
    "MDL",
    "Mercury",
    "Mesa",
    "MHEG-5",
    "Microcode",
    "Microsoft Power Fx",
    "MIIS",
    "MIMIC",
    "Mirah",
    "Miranda",
    "MIVA Script",
    "ML",
    "Model 204",
    "Modelica",
    "Malbolge",
    "Modula",
    "Modula-2",
    "Modula-3",
    "Mohol",
    "Mojo",
    "MOO",
    "Mortran",
    "Mouse",
    "MPD",
    "MSL",
    "MUMPS",
    "MuPAD",
    "Mutan",
    "Mystic Programming Language",
    "N",
    "NASM",
    "Napier88",
    "Neko",
    "Nemerle",
    "NESL",
    "Net.Data",
    "NetLogo",
    "NetRexx",
    "NewLISP",
    "NEWP",
    "Newspeak",
    "NewtonScript",
    "Nial",
    "Nickle",
    "Nim",
    "Nix",
    "NPL",
    "Not eXactly C",
    "Not Quite C",
    "NSIS",
    "Nu",
    "NWScript",
    "NXT-G",
    "O",
    "o:XML",
    "Oak",
    "Oberon",
    "OBJ2",
    "Object Lisp",
    "ObjectLOGO",
    "Object REXX",
    "Object Pascal",
    "Objective-C",
    "Obliq",
    "OCaml",
    "occam",
    "occam-π",
    "Octave",
    "OmniMark",
    "Opa",
    "Opal",
    "Open Programming Language",
    "OpenCL",
    "OpenEdge Advanced Business Language",
    "OpenVera",
    "OpenQASM",
    "OPS5",
    "OptimJ",
    "Orc",
    "ORCA/Modula-2",
    "Oriel",
    "Orwell",
    "Oxygene",
    "Oz",
    "P",
    "P",
    "P4",
    "ParaSail",
    "PARI/GP",
    "Pascal",
    "Pascal Script",
    "PCASTL",
    "PCF",
    "PEARL",
    "PeopleCode",
    "Perl",
    "PDL",
    "Pharo",
    "PHP",
    "Pico",
    "Picolisp",
    "Pict",
    "Pike",
    "PILOT",
    "Pipelines",
    "Pizza",
    "PL-11",
    "PL/0",
    "PL/B",
    "PL/C",
    "PL/I",
    "PL/M",
    "PL/P",
    "PL/S",
    "PL/SQL",
    "PL360",
    "PLANC",
    "Plankalkül",
    "Planner",
    "PLEX",
    "PLEXIL",
    "Plus",
    "POP-11",
    "POP-2",
    "PostScript",
    "PortablE",
    "POV-Ray SDL",
    "Powerhouse",
    "PowerBuilder",
    "PowerShell",
    "PPL",
    "Processing",
    "Processing.js",
    "Prograph",
    "Project Verona",
    "Prolog",
    "PROMAL",
    "Promela",
    "PROSE modeling language",
    "PROTEL",
    "ProvideX",
    "Pro*C",
    "Pure",
    "Pure Data",
    "PureScript",
    "PWCT",
    "Python",
    "Q",
    "Q",
    "Q#",
    "Qalb",
    "Quantum Computation Language",
    "QtScript",
    "QuakeC",
    "QPL",
    ".QL",
    "R",
    "R++",
    "Racket",
    "Raku",
    "RAPID",
    "Rapira",
    "Ratfiv",
    "Ratfor",
    "rc",
    "Reason",
    "REBOL",
    "Red",
    "Redcode",
    "REFAL",
    "REXX",
    "Ring",
    "ROOP",
    "RPG",
    "RPL",
    "RSL",
    "RTL/2",
    "Ruby",
    "Rust",
    "S",
    "S2",
    "S3",
    "S-Lang",
    "S-PLUS",
    "SA-C",
    "SabreTalk",
    "SAIL",
    "SAKO",
    "SAS",
    "SASL",
    "Sather",
    "Sawzall",
    "Scala",
    "Scheme",
    "Scilab",
    "Scratch",
    "ScratchJr",
    "Script.NET",
    "Sed",
    "Seed7",
    "Self",
    "SenseTalk",
    "SequenceL",
    "Serpent",
    "SETL",
    "Short Code",
    "SIMPOL",
    "SIGNAL",
    "SiMPLE",
    "SIMSCRIPT",
    "Simula",
    "Simulink",
    "SISAL",
    "SKILL",
    "SLIP",
    "SMALL",
    "Smalltalk",
    "SML",
    "Strongtalk",
    "Snap!",
    "SNOBOL",
    "Snowball",
    "SOL",
    "Solidity",
    "SOPHAEROS",
    "Source",
    "SPARK",
    "Speakeasy",
    "Speedcode",
    "SPIN",
    "SP/k",
    "SPL",
    "SPS",
    "SQL",
    "SQR",
    "Squeak",
    "Squirrel",
    "SR",
    "S/SL",
    "Starlogo",
    "Strand",
    "Stata",
    "Stateflow",
    "Subtext",
    "SBL",
    "SuperCollider",
    "Superplan",
    "SuperTalk",
    "Swift",
    "Swift",
    "SYMPL",
    "T",
    "TACL",
    "TACPOL",
    "TADS",
    "TAL",
    "Tcl",
    "Tea",
    "TECO",
    "TELCOMP",
    "TeX",
    "TEX",
    "TIE",
    "TMG",
    "Tom",
    "Toi",
    "Topspeed",
    "TPU",
    "Trac",
    "TTM",
    "T-SQL",
    "Transcript",
    "TTCN",
    "Turing",
    "TUTOR",
    "TXL",
    "TypeScript",
    "Tynker",
    "U",
    "Ubercode",
    "UCSD Pascal",
    "Umple",
    "Unicon",
    "Uniface",
    "UNITY",
    "UnrealScript",
    "V",
    "Vala",
    "Verse",
    "Vim script",
    "Viper",
    "Visual DataFlex",
    "Visual DialogScript",
    "Visual FoxPro",
    "Visual J++",
    "Visual LISP",
    "Visual Objects",
    "Visual Prolog",
    "W",
    "WATFIV",
    "WebAssembly",
    "WebDNA",
    "Whiley",
    "Winbatch",
    "Wolfram Language",
    "Wyvern",
    "X",
    "X++",
    "X10",
    "xBase++",
    "XBL",
    "XC",
    "xHarbour",
    "XL",
    "Xojo",
    "XOTcl",
    "Xod",
    "XPL",
    "XPL0",
    "XQuery",
    "XSB",
    "XSharp",
    "XSLT",
    "Xtend",
    "Y",
    "Yorick",
    "YQL",
    "Yoix",
    "Z",
    "Z shell",
    "Zebra",
    "Zeno",
    "ZetaLisp",
    "Zig",
    "Zonnon",
    "ZOPL",
    "ZPL",
    "Z++",
]

def return_random_language_name():
    fake = Faker()
    return fake.random_element(language_names)

def generate_names(amount):
    names = []
    for i in range(amount):
        word = return_random_language_name()
        names.append(word)

    return names

def generate_descriptions(amount):
    descriptions = []
    fake = Faker()
    for i in range(amount):
        descriptions.append(fake.paragraph(nb_sentences=1))

    return descriptions

def assemble_queries(names, descriptions):
    queries = []
    for i in range(len(names)):
        query = "INSERT INTO technology (name, description) VALUES ('" + names[i] + "', '" + descriptions[i] + "');"
        queries.append(query)

    return queries

def write_queries_to_file(queries):
    with open('populate_technologies.sql', 'w') as file:
        for query in queries:
            file.write(query + "\n")

def main():
    if len(sys.argv) < 2:
        print("Amount of technologies to generate is required as an argument. Example: python populate_technologies.py 10")
        return

    amount = int(sys.argv[1])
    names = generate_names(amount)
    descriptions = generate_descriptions(amount)
    queries = assemble_queries(names, descriptions)
    write_queries_to_file(queries)

if __name__ == "__main__":
    main()